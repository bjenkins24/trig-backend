name: Deploy

on:
  workflow_dispatch:
    branches: [ master ]
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  deploy:

    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
          operating-system: [ ubuntu-latest ]
          php-versions: [ '7.4' ]
    name: Deploy to ECS
    steps:
    - uses: actions/checkout@v2
    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.ci', '.env');"
    - name: Install PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-versions }}
    - name: Install Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist
    - name: Generate key
      run: php artisan key:generate
    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache
    - name: Create Database
      run: |
        mkdir -p database
        touch trig_test.db
    - name: Scaffold Database
      run: php artisan app:scaffold --env=testing
    - name: Execute tests (Unit and Feature tests) via PHPUnit
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: trig_test.db
      run: vendor/bin/phpunit
    - name: Execute coverage threshold
      run: vendor/bin/coverage-check clover.xml 81
    - name: "Configure AWS credentials"
      uses: aws-actions/configure-aws-credentials@v1
      with:
       aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY_ID }}"
       aws-region: us-west-1
       aws-secret-access-key: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
    - name: "Login to Amazon ECR"
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: "Create aws credentials file for docker image"
      run: "echo '[default]\naws_access_key_id='${{ secrets.AWS_ACCESS_KEY_ID }}'\naws_secret_access_key='${{ secrets.AWS_SECRET_ACCESS_KEY }}'\nregion=us-west-1' > aws_credentials"
    - name: "Build, tag, and push image to Amazon ECR"
      id: build-image
      run: |
        DOCKER_BUILDKIT=1 docker build --no-cache --progress=plain --build-arg NEW_RELIC_AGENT_VERSION=$NEW_RELIC_AGENT_VERSION --secret id=aws,src=aws_credentials -f .docker/php/production/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY_PHP:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_PHP:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_PHP:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_PHP
        DOCKER_BUILDKIT=1 docker build --no-cache --progress=plain -f .docker/web/production/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY_NGINX:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_NGINX:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_NGINX:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_NGINX
        aws --region us-west-1 ecs update-service --cluster main-frontend-production --service main-frontend-production --force-new-deployment
        aws --region us-west-1 ecs update-service --cluster main-backend-production --service main-backend-production-queue-worker --force-new-deployment
      env:
        ECR_REGISTRY: "${{ steps.login-ecr.outputs.registry }}"
        NEW_RELIC_AGENT_VERSION: 9.13.0.270
        ECR_REPOSITORY_PHP: main-production-php
        ECR_REPOSITORY_NGINX: main-production-nginx
        IMAGE_TAG: "${{ github.sha }}"
