name: Deploy

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws-region: us-west-1
          aws-secret-access-key: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
      - name: "Login to Amazon ECR"
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - uses: actions/checkout@v2
      - run: "echo \"[default]\\naws_access_key_id=$ACCESS_KEY\\naws_secret_access_key=$SECRET_KEY\\nregion=us-west-1\" > aws_credentials"
        shell: bash
        env:
          ACCESS_KEY: "${{ secrets.AWS_ACCESS_KEY_ID }}"
          SECRET_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
      - name: "Build, tag, and push image to Amazon ECR"
        id: build-image
        run: |
          DOCKER_BUILDKIT=1 docker build --no-cache --progress=plain --build-arg BUILD_ENVIRONMENT=production --secret id=aws,src=aws_credentials -f .docker/php/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        env:
          ECR_REGISTRY: "${{ steps.login-ecr.outputs.registry }}"
          ECR_REPOSITORY: main-production-php
          IMAGE_TAG: "${{ github.sha }}"
      - name: "Download task definition"
        id: task-def
        run: "aws ecs describe-task-definition --task-definition my-task-definition-family --query taskDefinition > task-definition.json\n"
      - name: "Deploy Amazon ECS task definition"
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          cluster: main-frontend-production
          service: main-frontend-production
          task-definition: "${{ steps.task-def.outputs.task-definition }}"
          wait-for-service-stability: true

